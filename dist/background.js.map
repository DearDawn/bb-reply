{"mappings":"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","sources":["<anon>","src/background.ts"],"sourcesContent":["(() => {\nlet $f38e5b3eeb655060$var$timer = null;\nlet $f38e5b3eeb655060$var$tabID = null;\nclass $f38e5b3eeb655060$var$Robot {\n    constructor(){\n        this.messageApi = \"https://api.bilibili.com/x/msgfeed/reply\";\n        this.cookie = \"\";\n        this.cookieMap = {};\n        this.messageList = [];\n        this.count = 0;\n        this.cursor = {\n            is_end: false,\n            id: undefined,\n            time: undefined\n        };\n    }\n    async init() {\n        const cookieList = await chrome.cookies.getAll({});\n        console.log(\"[dodo] \", \"cookieList\", cookieList);\n        this.cookieMap = cookieList.reduce((acc, cur)=>{\n            acc[cur.name] = cur.value;\n            return acc;\n        }, {});\n        let cookieString = cookieList.map((cookie)=>`${cookie.name}=${cookie.value}`).join(\"; \");\n        this.cookie = cookieString;\n        this.getMessageList();\n    }\n    getMessageUrl() {\n        const params = new URLSearchParams({\n            platform: \"web\",\n            build: \"0\",\n            mobi_app: \"web\"\n        });\n        if (this.cursor.id && this.cursor.time) {\n            params.append(\"cursor\", this.cursor.id.toString());\n            params.append(\"time\", this.cursor.time.toString());\n        }\n        console.log(\"[dodo] \", \"`${this.messageApi}?${params.toString()}`\", `${this.messageApi}?${params.toString()}`);\n        return `${this.messageApi}?${params.toString()}`;\n    }\n    async getMessageList() {\n        const res = await fetch(this.getMessageUrl(), {\n            headers: {\n                \"Cookie\": this.cookie\n            }\n        });\n        const data = await res.json();\n        console.log(\"[dodo] \", \"data\", data);\n        if (data.code === 0) {\n            this.messageList = data.data.items;\n            this.cursor = data.data.cursor;\n        }\n    }\n    async sendReply() {\n        const latestItem = this.messageList[0];\n        console.log(\"[dodo] \", \"latestItem\", latestItem);\n        const { item: item, user: user } = latestItem || {};\n        const { nickname: nickname } = user || {};\n        const { subject_id: subject_id, root_id: root_id, source_id: source_id } = item || {};\n        const csrfToken = this.cookieMap[\"bili_jct\"];\n        // fetch('http://localhost:7020/api/proxy', {\n        fetch(\"https://www.dododawn.com:7020/api/proxy\", {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\"\n            },\n            credentials: \"include\",\n            body: JSON.stringify({\n                url: \"https://api.bilibili.com/x/v2/reply/add\",\n                init: {\n                    method: \"POST\",\n                    headers: {\n                        \"content-type\": \"application/x-www-form-urlencoded\",\n                        \"Accept\": \"application/json, text/plain, */*\",\n                        \"Cookie\": this.cookie,\n                        \"Origin\": \"https://message.bilibili.com\",\n                        \"Referer\": \"https://message.bilibili.com/\",\n                        \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36\"\n                    },\n                    body: new URLSearchParams({\n                        oid: subject_id,\n                        type: \"1\",\n                        message: `\\u{56DE}\\u{590D} @${nickname} :\\u{56DE}\\u{590D}\\u{4E00}\\u{4E0B}\\u{770B}\\u{770B}, ${Date.now().toLocaleString()}`,\n                        root: root_id,\n                        parent: source_id,\n                        jsonp: \"jsonp\",\n                        scene: \"msg\",\n                        plat: \"1\",\n                        from: \"im-reply\",\n                        build: \"0\",\n                        mobi_app: \"web\",\n                        csrf: csrfToken,\n                        csrf_token: csrfToken\n                    }).toString()\n                }\n            })\n        }).then((res)=>res.json()).then((res)=>{\n            console.log(\"[dodo] \", \"reply res\", res);\n            chrome.runtime.sendMessage({\n                source: \"background\",\n                action: \"replyDone\",\n                res: {\n                    code: 0\n                }\n            });\n        });\n    // if (this.count < 2) {\n    //   this.count += 1;\n    //   setTimeout(() => {\n    //     this.sendReply();\n    //   }, Math.random() * 3000 + 2000);\n    // }\n    // chrome.tabs.sendMessage(tabID, {\n    //   source: 'background', action: 'bbReply', url: 'https://api.bilibili.com/x/v2/reply/add', obj: {\n    //     method: 'POST',\n    //     headers: {\n    //       'content-type': 'application/x-www-form-urlencoded',\n    //       'Accept': 'application/json, text/plain, */*',\n    //       'Cookie': this.cookie,\n    //       'Origin': 'https://message.bilibili.com',\n    //       'Referer': 'https://message.bilibili.com/',\n    //     },\n    //     body: new URLSearchParams({\n    //       oid: subject_id,\n    //       type: '1',\n    //       message: `回复 @${nickname} :回复一下看看, ${Date.now().toLocaleString()}`,\n    //       root: root_id,\n    //       parent: source_id,\n    //       jsonp: 'jsonp',\n    //       scene: 'msg',\n    //       plat: '1',\n    //       from: 'im-reply',\n    //       build: '0',\n    //       mobi_app: 'web',\n    //       csrf: csrfToken,\n    //       csrf_token: csrfToken\n    //     }).toString()\n    //   }\n    // });\n    }\n}\nconst $f38e5b3eeb655060$var$robot = new $f38e5b3eeb655060$var$Robot();\nconst $f38e5b3eeb655060$var$injectedHelper = (tabId)=>{\n    // 注入 tabId 参数\n    chrome.scripting.executeScript({\n        target: {\n            tabId: tabId\n        },\n        world: \"MAIN\",\n        func: (...args)=>{\n            const BB_REPLY_EXT_NAME = \"bb_reply_chrome_extension\";\n            window[BB_REPLY_EXT_NAME] = window[BB_REPLY_EXT_NAME] || {};\n            window[BB_REPLY_EXT_NAME].args = args || [];\n        },\n        args: [\n            tabId\n        ]\n    }).then(()=>{\n        // 执行脚本\n        chrome.scripting.executeScript({\n            target: {\n                tabId: tabId\n            },\n            world: \"MAIN\",\n            files: [\n                \"./script.js\"\n            ]\n        });\n    });\n};\n// chrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\n//   if (changeInfo.status === 'complete' && tab.url) {\n//     clearTimeout(timer);\n//     timer = setTimeout(() => {\n//       injectedHelper(tabId);\n//     }, 100);\n//   }\n// });\nchrome.tabs.onActivated.addListener(function(activeInfo) {\n    $f38e5b3eeb655060$var$tabID = activeInfo.tabId;\n    console.log(\"Activated Tab ID:\", $f38e5b3eeb655060$var$tabID);\n});\nchrome.runtime.onMessage.addListener((request)=>{\n    const { source: source, action: action } = request || {};\n    console.log(\"[dodo] \", \"content ready\", source, action);\n    if (source === \"content\") {\n        if (action === \"ready\") $f38e5b3eeb655060$var$robot.init();\n    } else if (source === \"popup\") {\n        if (action === \"ready\") {\n            console.log(\"[dodo] \", \"popup ready\");\n            chrome.runtime.sendMessage({\n                source: \"background\",\n                action: \"ready\",\n                cookie: $f38e5b3eeb655060$var$robot.cookie\n            });\n        } else if (action === \"bbReply\") $f38e5b3eeb655060$var$robot.sendReply();\n    }\n    return false;\n});\n\n})();\n//# sourceMappingURL=background.js.map\n","let timer = null;\nlet tabID = null;\n\nclass Robot {\n  messageApi = 'https://api.bilibili.com/x/msgfeed/reply';\n  cookie = '';\n  cookieMap = {};\n  messageList = [];\n  count = 0;\n  cursor: { is_end?: boolean; id?: number, time?: number; } = {\n    is_end: false,\n    id: undefined,\n    time: undefined,\n  };\n  constructor () {\n  }\n\n  async init () {\n    const cookieList = await chrome.cookies.getAll({});\n    console.log('[dodo] ', 'cookieList', cookieList);\n    this.cookieMap = cookieList.reduce((acc, cur) => {\n      acc[cur.name] = cur.value;\n      return acc;\n    }, {});\n    let cookieString = cookieList.map(cookie => `${cookie.name}=${cookie.value}`).join('; ');\n    this.cookie = cookieString;\n    this.getMessageList();\n  }\n\n  getMessageUrl () {\n    const params = new URLSearchParams({\n      platform: 'web',\n      build: '0',\n      mobi_app: 'web',\n    });\n\n    if (this.cursor.id && this.cursor.time) {\n      params.append('cursor', this.cursor.id.toString());\n      params.append('time', this.cursor.time.toString());\n    }\n\n    console.log('[dodo] ', '`${this.messageApi}?${params.toString()}`', `${this.messageApi}?${params.toString()}`);\n    return `${this.messageApi}?${params.toString()}`;\n  }\n\n  async getMessageList () {\n\n    const res = await fetch(this.getMessageUrl(), {\n      headers: { 'Cookie': this.cookie }\n    });\n    const data = await res.json();\n    console.log('[dodo] ', 'data', data);\n    if (data.code === 0) {\n      this.messageList = data.data.items;\n      this.cursor = data.data.cursor;\n    }\n  }\n\n  async sendReply () {\n    const latestItem = this.messageList[0];\n    console.log('[dodo] ', 'latestItem', latestItem);\n    const { item, user } = latestItem || {};\n    const { nickname } = user || {};\n    const { subject_id, root_id, source_id } = item || {};\n    const csrfToken = this.cookieMap['bili_jct'];\n\n    // fetch('http://localhost:7020/api/proxy', {\n    fetch('https://www.dododawn.com:7020/api/proxy', {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n      },\n      credentials: 'include',\n      body: JSON.stringify({\n        url: 'https://api.bilibili.com/x/v2/reply/add',\n        init: {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/x-www-form-urlencoded',\n            'Accept': 'application/json, text/plain, */*',\n            'Cookie': this.cookie,\n            'Origin': 'https://message.bilibili.com',\n            'Referer': 'https://message.bilibili.com/',\n            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36'\n          },\n          body: new URLSearchParams({\n            oid: subject_id,\n            type: '1',\n            message: `回复 @${nickname} :回复一下看看, ${Date.now().toLocaleString()}`,\n            root: root_id,\n            parent: source_id,\n            jsonp: 'jsonp',\n            scene: 'msg',\n            plat: '1',\n            from: 'im-reply',\n            build: '0',\n            mobi_app: 'web',\n            csrf: csrfToken,\n            csrf_token: csrfToken\n          }).toString()\n        }\n      })\n    }).then(res => res.json())\n      .then(res => {\n        console.log('[dodo] ', 'reply res', res);\n        chrome.runtime.sendMessage({ source: 'background', action: 'replyDone', res: { code: 0 } });\n      });\n\n    // if (this.count < 2) {\n    //   this.count += 1;\n    //   setTimeout(() => {\n    //     this.sendReply();\n    //   }, Math.random() * 3000 + 2000);\n    // }\n    // chrome.tabs.sendMessage(tabID, {\n    //   source: 'background', action: 'bbReply', url: 'https://api.bilibili.com/x/v2/reply/add', obj: {\n    //     method: 'POST',\n    //     headers: {\n    //       'content-type': 'application/x-www-form-urlencoded',\n    //       'Accept': 'application/json, text/plain, */*',\n    //       'Cookie': this.cookie,\n    //       'Origin': 'https://message.bilibili.com',\n    //       'Referer': 'https://message.bilibili.com/',\n    //     },\n    //     body: new URLSearchParams({\n    //       oid: subject_id,\n    //       type: '1',\n    //       message: `回复 @${nickname} :回复一下看看, ${Date.now().toLocaleString()}`,\n    //       root: root_id,\n    //       parent: source_id,\n    //       jsonp: 'jsonp',\n    //       scene: 'msg',\n    //       plat: '1',\n    //       from: 'im-reply',\n    //       build: '0',\n    //       mobi_app: 'web',\n    //       csrf: csrfToken,\n    //       csrf_token: csrfToken\n    //     }).toString()\n    //   }\n    // });\n  }\n}\n\nconst robot = new Robot();\n\nconst injectedHelper = (tabId: number) => {\n  // 注入 tabId 参数\n  chrome.scripting.executeScript({\n    target: { tabId },\n    world: \"MAIN\",\n    func: (...args) => {\n      const BB_REPLY_EXT_NAME = 'bb_reply_chrome_extension';\n      window[BB_REPLY_EXT_NAME] = window[BB_REPLY_EXT_NAME] || {};\n      window[BB_REPLY_EXT_NAME].args = args || [];\n    },\n    args: [tabId]\n  }).then(() => {\n    // 执行脚本\n    chrome.scripting.executeScript({\n      target: { tabId },\n      world: \"MAIN\",\n      files: ['./script.js']\n    });\n  });\n};\n\n// chrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\n//   if (changeInfo.status === 'complete' && tab.url) {\n//     clearTimeout(timer);\n\n//     timer = setTimeout(() => {\n//       injectedHelper(tabId);\n//     }, 100);\n//   }\n// });\n\nchrome.tabs.onActivated.addListener(function (activeInfo) {\n  tabID = activeInfo.tabId;\n  console.log('Activated Tab ID:', tabID);\n});\n\nchrome.runtime.onMessage.addListener((request: { source: string, action: string; }) => {\n  const { source, action } = request || {};\n  console.log('[dodo] ', 'content ready', source, action);\n\n  if (source === 'content') {\n    if (action === 'ready') {\n      robot.init();\n    }\n  } else if (source === 'popup') {\n    if (action === 'ready') {\n      console.log('[dodo] ', 'popup ready');\n      chrome.runtime.sendMessage({ source: 'background', action: 'ready', cookie: robot.cookie });\n    } else if (action === 'bbReply') {\n      robot.sendReply();\n    }\n  }\n\n  return false;\n});\n"],"names":["$f38e5b3eeb655060$var$robot","constructor","messageApi","cookie","cookieMap","messageList","count","cursor","is_end","id","undefined","time","init","cookieList","chrome","cookies","getAll","console","log","reduce","acc","cur","name","value","cookieString","map","join","getMessageList","getMessageUrl","params","URLSearchParams","platform","build","mobi_app","append","toString","res","fetch","headers","data","json","code","items","sendReply","latestItem","item","user","nickname","subject_id","root_id","source_id","csrfToken","method","credentials","body","JSON","stringify","url","oid","type","message","Date","now","toLocaleString","root","parent","jsonp","scene","plat","from","csrf","csrf_token","then","runtime","sendMessage","source","action","tabs","onActivated","addListener","activeInfo","tabId","onMessage","request"],"version":3,"file":"background.js.map"}